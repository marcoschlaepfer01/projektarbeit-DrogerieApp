@page "/map"
@rendermode InteractiveServer
@using DrogerieApp.ClassLibrary.Maps
@using DrogerieApp.Web
@inject IJSRuntime Runtime

<PageTitle>Map</PageTitle>

<div style="display: flex; flex-direction: row; height: 800px;">
    <!-- Left panel: Scrollable list of places -->
    <div style="width: 300px; overflow-y: auto; border-right: 1px solid #ccc; padding: 10px; background-color: #f9f9f9;">
        @if (places is not null && places.Any())
        {
            @foreach (var place in places)
            {
                <div style="
                    background-color: #fff;
                    border-radius: 8px;
                    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
                    padding: 15px;
                    margin-bottom: 20px;
                    transition: box-shadow 0.3s ease-in-out;"
                     onmouseover="this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)';"
                     onmouseout="this.style.boxShadow='0 2px 6px rgba(0,0,0,0.1)';">

                    <strong style="font-size: 1.1em;">@place.Name</strong><br />
                    <span style="display: block; margin-top: 5px;">@((MarkupString)place.Address)</span>
                    <span style="font-size: 0.9em; display: block; margin-top: 5px; color: @(place.Status.Contains("OPERATIONAL", StringComparison.OrdinalIgnoreCase) ? "green" : "red")">
                        @(place.Status.Contains("OPERATIONAL", StringComparison.OrdinalIgnoreCase) ? "Geöffnet" : "Geschlossen")
                    </span>
                </div>
            }
        }
        else
        {
            <div>No places found</div>
        }
    </div>

    <!-- Right panel: Map -->
    <div style="flex: 1; position: relative;">
        <div id="@ElementId" style="height: 100%; width: 100%;"></div>
    </div>
</div>

@code {
    private string ElementId { get; set; } = "map";
    private List<PlaceResult> places = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Runtime.LoadGoogleMapsApiAsync();
            await Runtime.InitGoogleMapsAsync(new
            {
                elementId = ElementId,
                mapId = "4504f8b37365c3d0",
                center = new { lat = 47.4185, lng = 9.353 },
                zoom = 14
            });

            var results = await Runtime.SearchAsync(new
            {
                location = new { lat = 47.4185, lng = 9.353 },
                radius = 5000,
                includedPrimaryTypes = new string[] { "drugstore" }
            });

            places = results;
            StateHasChanged();
        }
    }

    private string GetPlacePhoto(PlaceResult place)
    {
        return place.Photo?.authorAttributions?.FirstOrDefault()?.photoURI ?? string.Empty;
    }
}
